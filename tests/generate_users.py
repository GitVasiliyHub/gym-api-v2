import psycopg2
from faker import Faker
import random

# Инициализация Faker
fake = Faker()

# Подключение к базе данных PostgreSQL
conn = psycopg2.connect(
    dbname="gym",
    user="admin",
    password="admin",
    host="localhost",
    port="5433"
)
cursor = conn.cursor()

# Функция для вставки мастеров
def insert_masters():
    for _ in range(1, 4):
        username = fake.user_name()
        phone = fake.phone_number()
        first_name = fake.first_name()
        last_name = fake.last_name()
        email = fake.email()
        telegram_id = random.randint(100000000, 999999999)

        # Вставка в таблицу user
        cursor.execute("""
            INSERT INTO gym.user (username, phone, first_name, last_name, email, telegram_id)
            VALUES (%s, %s, %s, %s, %s, %s)
            RETURNING user_id;
        """, (username, phone, first_name, last_name, email, telegram_id))
        user_id = cursor.fetchone()[0]

        # Вставка в таблицу master
        cursor.execute("""
            INSERT INTO gym.master (user_id, create_dttm)
            VALUES (%s, NOW())
            RETURNING master_id;
        """, (user_id,))
        master_id = cursor.fetchone()[0]
        print(master_id)

        # Сохраняем master_id для второго и третьего мастера
        if _ == 2:
            master2_id = master_id
        elif _ == 3:
            master3_id = master_id

    return master2_id, master3_id

# Функция для вставки гимнастов
def insert_gymers(master_id, count=15):
    for _ in range(count):
        username = fake.user_name()
        phone = fake.phone_number()
        first_name = fake.first_name()
        last_name = fake.last_name()
        email = fake.email()
        telegram_id = random.randint(100000000, 999999999)

        # Вставка в таблицу users
        cursor.execute("""
            INSERT INTO gym.user (username, phone, first_name, last_name, email, telegram_id)
            VALUES (%s, %s, %s, %s, %s, %s)
            RETURNING user_id;
        """, (username, phone, first_name, last_name, email, telegram_id))
        user_id = cursor.fetchone()[0]

        # Вставка в таблицу gymer
        cursor.execute("""
            INSERT INTO gym.gymer (user_id, create_dttm)
            VALUES (%s,  NOW()) RETURNING gymer_id;
        """, (user_id,))
        gymer_id = cursor.fetchone()[0]
        
        cursor.execute("""
            INSERT INTO gym.master_gym (master_id, gymer_id, create_dttm)
            VALUES (%s, %s, NOW());
        """, (master_id, gymer_id))


EXERCISE = [
    ['Жим платформы ногами лежа', 'Широкая постановка ног'],
['Зашагивание с гантелями на скамье по одной ноге', 'Следи за наклоном туловища, тазом. Работой сначала одной ногой 12, затем второй'],
['Разгибание голени в тренажере сидя', 'Дроп-сет/Без отдыха подход состоящий из трех подподходов'],
['Жим гантелями лежа на наклонной скамье 30 градусов', 'Дроп-сет/Без отдыха подход состоящий из трех подподходов'],
['Тяга штанги к поясу в наклоне стоя', 'Полная Пирамида/Каждый подход отдельно через промежуток отдыха'],
['Вертикальная рычажная тяга (узко)', 'Акцент на сведение лопаток и работу широчайших'],
['Сгибание со штангой на бицепс стоя (узкий хват)', 'Контроль локтей'],
['Тяга штанги на согнутых ногах стоя (ягодицы)', 'Полная Пирамида/Каждый подход отдельно через промежуток отдыха'],
['Выпады с гантелями стоя (с опорой под ногу/без)', 'Контроль наклона туловища/таза и углов в коленных суставах'],
['Жим гантелей лежа на горизонтальной скамье', 'Дроп-сет/Без отдыха подход состоящий из трех подподходов'],
['Обратные отжимания от скамьи', 'Спиной к скамье, руки чуть шире плеч/Туловище перемещается вверх вниз, локти вдоль туловища'],
['Становая тяга классическая с плинтов', 'Полная Пирамида/Каждый подход отдельно через промежуток отдыха'],
['Тяга штанги в наклоне стоя', 'Акцент на сведение лопаток и работу широчайших'],
['Горизонтальная рычажная тяга (узко) по одной руке сидя', 'Акцент на сведение лопаток и работу широчайших/Большая амплитуда на каждую руку'],
['Горизонтальная тяга нижнего блока к поясу узким хватом в блочном тренажере сидя', 'Дроп-сет/Без отдыха подход состоящий из трех подподходов'],
['Отжимания (брусья)', 'Полная Пирамида/Каждый подход отдельно через промежуток отдыха'],
['Отжимания от пола (узко)', 'Локти вдоль туловища/Работа через трицепс'],
['Приседания со штангой на спине', 'Полная Пирамида/Каждый подход отдельно через промежуток отдыха'],
['Гакк-приседания (широко)', 'Широкая постановка ног'],
['Разгибание туловища (ягодицы)', 'Дроп-сет/Без отдыха подход состоящий из трех подподходов'],
['Сгибание голени в тренажере лежа', 'Без рывков! Контроль амплитуды движения'],
['Жиш штанги лежа на горизонтальной скамье', 'Полная Пирамида/Каждый подход отдельно через промежуток отдыха'],
['Жим штанги лежа на наклонной скамье 30 градусов', 'Полная Пирамида/Каждый подход отдельно через промежуток отдыха'],
['Отжимания от пола', 'Средняя/Широкая постановка рук'],
['Тяга Т-грифа лежа в наклоне (в тренажере) средним хватом', 'Полная Пирамида/Каждый подход отдельно через промежуток отдыха'],
['Горизонтальная рычажная тяга (узко)', 'Акцент на сведение лопаток и работу широчайших'],
['Вертикальная тяга верхнего блока к груди средним хватом в блочном тренажере сидя', 'Дроп-сет/Без отдыха подход состоящий из трех подподходов'],
['Горизонтальная тяга нижнего блока к поясу средним хватом в блочном тренажере сидя', 'Дроп-сет/Без отдыха подход состоящий из трех подподходов'],
['Французский жим штанги лежа за голову (хват снизу чуть уже или на ширине плеч)', 'Контроль локтей/Исходное положение лежа, штанга вытянута перпендикулярно туловищу, сгибаешь руки в локтевых сутсавах, опуская штангу за голову к темечку/Локти немного расходятся в сторону, параллельны друг другу'],
['Сгибание со штангой на бицепс стоя', 'Контроль локтей'],
['Блок-трицепс', 'Дроп-сет/Без отдыха подход состоящий из трех подподходов'],
['Прямые скручивания', '-']  
]

def insert_exercise(exercises, master_id=1):
    for _ in exercises:
        # Вставка в таблицу exercise
        cursor.execute("""
            INSERT INTO gym.exercise (master_id, title)
            VALUES (%s, %s ) RETURNING exercise_id;
        """, (master_id, _[0]))
        exercise_id = cursor.fetchone()[0]
        
        cursor.execute("""
            INSERT INTO gym.exercise_desc (exercise_id, description)
            VALUES (%s, %s );
        """, (exercise_id, _[1]))
        

# Вставляем мастеров и получаем их master_id
master2_id, master3_id = insert_masters()

# Вставляем гимнастов для второго мастера
insert_gymers(master2_id, 15)

# Вставляем гимнастов для третьего мастера
insert_gymers(master3_id, 15)

# Вставка в таблицу exercise
insert_exercise(EXERCISE)
# Фиксируем изменения и закрываем соединение
conn.commit()
cursor.close()
conn.close()

print("Данные успешно добавлены!")

