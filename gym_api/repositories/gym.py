from sqlalchemy import select, text
from fastapi import HTTPException
from sqlalchemy.ext.asyncio import AsyncSession

from .base import BaseRepository
from ..manager import base as manager
from ..database.postgres.base import SessionProvider
from ..config import db
from ..models import autogenerated as model


from pydantic import BaseModel, ConfigDict

class Res(BaseModel):
    username: str
    gymer_id: int
    
    model_config = ConfigDict(from_attributes=True)

_session_provider = SessionProvider(
    async_mode=True,
    engine_settings={'pool_pre_ping': True},
    db_settings=db
)

class GymRepository(BaseRepository):
    @classmethod
    @_session_provider
    async def select_master_gymers_data(
        cls,
        master_id: int,
        session: AsyncSession=None
    ):
        mg = model.MasterGym
        g = model.Gymer
        u = model.User
        
        sub = select(mg.gymer_id).where(
            mg.master_id == master_id,
            mg.close_dttm.is_(None)
            )
        
        statement = select(
            u.username,
            g.gymer_id
        ).join(
            g, g.user_id == u.user_id
        ).where(g.gymer_id.in_(sub))
        
        rows = await session.execute(statement)

        result = []
        for row in rows:
            result.append(Res.model_validate(row))
        
        return result
        